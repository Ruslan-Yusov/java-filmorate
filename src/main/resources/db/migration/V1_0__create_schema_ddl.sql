-- DROP SEQUENCE filmorate.film_id_seq;

CREATE SEQUENCE filmorate.film_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- filmorate.film definition

-- Drop table

-- DROP TABLE filmorate.film;

CREATE TABLE filmorate.mpa
(
    id     int4    NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
    name varchar NOT NULL,
    CONSTRAINT mpa_pk PRIMARY KEY (id),
    CONSTRAINT mpa_un UNIQUE (name)
);

CREATE TABLE filmorate.genre
(
    id     int4    NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar NOT NULL,
    CONSTRAINT genre_pk PRIMARY KEY (id),
    CONSTRAINT genre_un UNIQUE (name)
);

CREATE TABLE filmorate.film
(
    id           int4    NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
    name       varchar NOT NULL,
    description  varchar NULL,
    release_date date    NOT NULL,
    duration     int4    NOT NULL,
    mpa_id       int4    NOT NULL,
    CONSTRAINT film_pk PRIMARY KEY (id),
    CONSTRAINT film_un UNIQUE (name),
    CONSTRAINT film_mpa_fk FOREIGN KEY (mpa_id) REFERENCES filmorate.mpa (id)
);


-- filmorate.users definition

-- Drop table

-- DROP TABLE filmorate.users;

CREATE TABLE filmorate.users
(
    id       int4      GENERATED BY DEFAULT AS IDENTITY,
    login    varchar   NOT NULL,
    name   varchar   NOT NULL,
    email    varchar   NOT NULL,
    birthday timestamp NOT NULL,
    CONSTRAINT user_pk PRIMARY KEY (id),
    CONSTRAINT user_un UNIQUE (email)
);


-- filmorate.user_to_friend definition

-- Drop table

-- DROP TABLE filmorate.user_to_friend;

CREATE TABLE filmorate.user_to_friend
(
    user1_id int4 NOT NULL,
    user2_id int4 NOT NULL,
    approved bool NULL DEFAULT false,
    CONSTRAINT user_to_friend_check CHECK ((user1_id <> user2_id)),
    CONSTRAINT user_to_friend_un UNIQUE (user1_id, user2_id),
    CONSTRAINT user_to_friend_u1_fk FOREIGN KEY (user1_id) REFERENCES filmorate.users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT user_to_friend_u2_fk FOREIGN KEY (user2_id) REFERENCES filmorate.users (id) ON DELETE CASCADE ON UPDATE CASCADE
);


-- filmorate.user_like definition

-- Drop table

-- DROP TABLE filmorate.user_like;

CREATE TABLE filmorate.user_like
(
    user_id int4 NOT NULL,
    film_id int4 NOT NULL,
    CONSTRAINT user_like_un UNIQUE (user_id, film_id),
    CONSTRAINT user_like_f_fk FOREIGN KEY (film_id) REFERENCES filmorate.film (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT user_like_u_fk FOREIGN KEY (user_id) REFERENCES filmorate.users (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE filmorate.film_to_genre
(
    film_id int4 NOT NULL,
    genre_id int4 NOT NULL,
    CONSTRAINT film_to_genre_un UNIQUE (genre_id, film_id),
    CONSTRAINT film_to_genre_f_fk FOREIGN KEY (film_id) REFERENCES filmorate.film (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT film_to_genre_g_fk FOREIGN KEY (genre_id) REFERENCES filmorate.genre (id) ON DELETE CASCADE ON UPDATE CASCADE
);